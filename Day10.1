Rotten Oranges:

int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,int>>q;
        int fresh=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push(make_pair(i,j));
                }
                else if(grid[i][j]==1)
                    fresh++;
            }
        }
        int count=0;
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                pair<int,int>p=q.front();
                q.pop();
                if(p.first-1>=0 && grid[p.first-1][p.second]==1)
                {
                    grid[p.first-1][p.second]=2;
                    q.push(make_pair(p.first-1,p.second));
                    fresh--;
                }
                if(p.first+1<n && grid[p.first+1][p.second]==1)
                {
                    grid[p.first+1][p.second]=2;
                    q.push(make_pair(p.first+1,p.second));
                    fresh--;
                }
                if(p.second-1>=0 && grid[p.first][p.second-1]==1)
                {
                    grid[p.first][p.second-1]=2;
                    q.push(make_pair(p.first,p.second-1));
                    fresh--;
                }
                if(p.second+1<m && grid[p.first][p.second+1]==1)
                {
                    grid[p.first][p.second+1]=2;
                    q.push(make_pair(p.first,p.second+1));
                    fresh--;
                }
            }
            if(!q.empty())
                count++;
        }
        if(fresh>0)
            return -1;
        return count;
    }
