As far from land as possible

int bfs(vector<vector<int>> grid,int i,int j,int n)
    {
        queue<pair<int,int>>q;
        q.push(make_pair(i,j));
        while(!q.empty())
        {
            pair<int,int>p;
            p=q.front();
            q.pop();
            if(grid[p.first][p.second]==1)
            {
                return (abs(p.first-i)+abs(p.second-j));
            }
            if(p.first-1>=0)
            {
                q.push(make_pair(p.first-1,p.second));
            }
            if(p.first+1<n)
            {
                q.push(make_pair(p.first+1,p.second));
            }
            if(p.second-1>=0)
            {
                q.push(make_pair(p.first,p.second-1));
            }
            if(p.second+1<n)
            {
                q.push(make_pair(p.first,p.second+1));
            }
        }
        return 0;
    }
    int maxDistance(vector<vector<int>>& grid) {
        int maxdist=0;
        int n =grid.size();
        int count=0;
        int count1=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    count++;
                }
                else{
                    count1++;
                    maxdist=max(maxdist,bfs(grid,i,j,n));
                }
            }
        }
        if(count==(n*n) || count1==(n*n))
            return -1;
        return maxdist;
    }
