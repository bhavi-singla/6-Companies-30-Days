Unit area of largest one

void dfs(vector<vector<int>>& grid,int i,int j,int n,int m,int& count)
    {
        if(grid[i][j]==0)
            return ;
        if(i<0 || j<0 || i>=n || j>=m)
            return ;
        grid[i][j]=0;
        if(i-1>=0 && j-1>=0 && grid[i-1][j-1]==1)
        {
            count++;
            dfs(grid,i-1,j-1,n,m,count);
        }
        if(i+1<n && j+1<m && grid[i+1][j+1]==1)
        {
            count++;
            dfs(grid,i+1,j+1,n,m,count);
        }
        if(i-1>=0 && grid[i-1][j]==1)
        {
            count++;
            dfs(grid,i-1,j,n,m,count);
        }
        if(j-1>=0 && grid[i][j-1]==1)
        {
            count++;
            dfs(grid,i,j-1,n,m,count);
        }
        if(i+1<n && grid[i+1][j]==1)
        {
            count++;
            dfs(grid,i+1,j,n,m,count);
        }
        if(j+1<m && grid[i][j+1]==1)
        {
            count++;
            dfs(grid,i,j+1,n,m,count);
        }
        if(i-1>=0 && j+1<m && grid[i-1][j+1]==1)
        {
            count++;
            dfs(grid,i-1,j+1,n,m,count);
        }
        if(i+1<n && j-1>=0 && grid[i+1][j-1]==1)
        {
            count++;
            dfs(grid,i+1,j-1,n,m,count);
        }
    }
    int findMaxArea(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int ans=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    int count=1;
                    dfs(grid,i,j,n,m,count);
                    if(count>ans)
                        ans=count;
                }
            }
        }
        return ans;
    }
